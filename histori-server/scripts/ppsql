#!/bin/bash
#
# Parallel psql
#
# Runs a SQL command on several PostgreSQL databases (in series, not parallel)
#
# We assume the naming convention that shard database names start with histori_ and are zero-indexed,
# and that a histori_master database exists.
#

function die {
  echo 1>&2 "${1}"
  exit 1
}

function exec_psql {
  IS_FILE=${1} ; shift
  DB_NAME=${1} ; shift
  SQL="${@}"
  if [ ${IS_FILE} -eq 0 ] ; then
    result=$(echo "${SQL}" | psql ${OPTS} -U histori ${DB_NAME})
  else
    result=$(psql ${OPTS} -f "${SQL}" -U histori ${DB_NAME})
  fi
  if [ $(echo "${result}" | tr -d '[[:space:]]' | wc -c | tr -d ' ') -gt 0 ] ; then
    if [[ ${result} == *$'\n'* ]] ; then
      echo ">>> results from: ${DB_NAME}:"
      echo "${result}"
    else
      echo ">>> results from: ${DB_NAME}: ${result}"
    fi
  fi
}

if [ ! -z "${PPSQL_COUNT}" ] ; then
  COUNT="${PPSQL_COUNT}"
else
  COUNT="${1:?no count given}" ; shift
fi

OPTS="-t"
if [ -z "${1}" ] ; then
  die "No sql given"
elif [[ "${1}" =~ ^- ]] ; then
  OPTS="${1}"
  shift
fi

SQL="${@:?no sql given}"
IS_FILE=0
if [ -e "${SQL}" ] ; then
  IS_FILE=1
fi

i=0
while [ ${i} -lt ${COUNT} ] ; do
  exec_psql ${IS_FILE} histori_${i} "${SQL}"
  i=$((i + 1))
done

exec_psql ${IS_FILE} histori_master "${SQL}"
